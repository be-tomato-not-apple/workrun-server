name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle   # Gradle 캐시

      - name: Build with Gradle (skip tests)
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar -x test

      # 필요 시: 멀티모듈이면 특정 모듈의 bootJar를 지정
      # - name: Build specific module
      #   run: ./gradlew :server:bootJar -x test

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server .

      - name: Push Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.WORKRUN_SERVER_IP }}/env")
          if [ "$STATUS" = "200" ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.WORKRUN_SERVER_IP }}/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ "$CURRENT_UPSTREAM" = "blue" ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ "$CURRENT_UPSTREAM" = "green" ]; then
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          else
            echo "error"; exit 1
          fi

      - name: Docker compose (switch target upstream)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 20m
          script: |
            set -e
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

            # 애플리케이션에 secrets 전달 (env)
            export APPLICATION_SECRET='${{ secrets.APPLICATION_SECRET }}'

            # docker compose v1/v2 호환
            if command -v docker-compose >/dev/null 2>&1; then
              APPLICATION_SECRET="$APPLICATION_SECRET" sudo -E docker-compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d
            else
              APPLICATION_SECRET="$APPLICATION_SECRET" sudo -E docker compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d
            fi

      - name: Health check new target
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.WORKRUN_SERVER_IP }}:${{ env.STOPPED_PORT }}/env
          max-attempts: 6
          retry-delay: 10s

      - name: Change nginx upstream
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'

      - name: Stop current server
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker rm -f ${{ env.CURRENT_UPSTREAM }} || true
