name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      jar_name: ${{ steps.jarname.outputs.jar }}
    steps:
      - uses: actions/checkout@v4

      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build with Gradle (skip tests)
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar -x test

      # (A) JAR 존재 검증 + 파일명 추출
      - name: Assert JAR exists
        id: jarname
        run: |
          ls -l build/libs || true
          JAR=$(ls -1 build/libs/*.jar | head -n1)
          [ -f "$JAR" ] || (echo "JAR not found"; exit 1)
          echo "jar=$JAR" >> "$GITHUB_OUTPUT"

      # (B) Docker 배포를 계속 쓸 거면 유지
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg JAR_FILE=build/libs/*.jar \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

      # (C) JAR 전송을 쓸 수 있게 아티팩트 업로드 (deploy에서 받을 수 있게)
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-jar
          path: ${{ steps.jarname.outputs.jar }}
          retention-days: 3

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # --- (옵션) JAR 전송을 쓸 경우: 아티팩트 다운로드 후 SCP로 복사 ---
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: built-jar
          path: ./release

      - name: Ensure remote releases dir
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p /home/ubuntu/releases

      # ✅ 여기서 반드시 source 지정!
      - name: Upload JAR via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./release/*.jar"          # <= 없어서 실패했던 부분
          target: "/home/ubuntu/releases/"
          overwrite: true
          timeout: 30s
          command_timeout: 10m

      # --- 원래 하던 Docker 방식 배포 (이미지 풀 + compose up) ---
      - name: Detect current upstream (native ssh)
        shell: bash
        run: |
          set -euo pipefail
          echo "${{ secrets.EC2_SSH_KEY }}" > id_rsa
          chmod 600 id_rsa
          UP=$(ssh -o StrictHostKeyChecking=no -i id_rsa ubuntu@${{ secrets.WORKRUN_SERVER_IP }} \
            'if [ -z "$(docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
               echo green
             else
               docker exec -i nginxserver bash -lc '\''grep -oE "(blue|green)" /etc/nginx/conf.d/service-env.inc 2>/dev/null || echo green'\''
             fi')
          echo "Detected upstream on EC2: $UP"
          echo "CURRENT_UPSTREAM=$UP" >> "$GITHUB_ENV"
          if [ "$UP" = "blue" ]; then
            echo "CURRENT_PORT=8080"   >> "$GITHUB_ENV"
            echo "STOPPED_PORT=8081"  >> "$GITHUB_ENV"
            echo "TARGET_UPSTREAM=green" >> "$GITHUB_ENV"
          else
            echo "CURRENT_PORT=8081"  >> "$GITHUB_ENV"
            echo "STOPPED_PORT=8080"  >> "$GITHUB_ENV"
            echo "TARGET_UPSTREAM=blue"  >> "$GITHUB_ENV"
          fi

      - name: Deploy target upstream (pull, secret write, compose up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 20m
          script: |
            set -euo pipefail
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

            sudo mkdir -p /home/ubuntu/secrets
            echo '${{ secrets.APPLICATION_SECRET }}' | base64 -d | sudo tee /home/ubuntu/secrets/application-secret.yml >/dev/null
            sudo chmod 600 /home/ubuntu/secrets/application-secret.yml

            cd /home/ubuntu
            echo "Compose: docker-compose-${{ env.TARGET_UPSTREAM }}.yml"
            ls -l "docker-compose-${{ env.TARGET_UPSTREAM }}.yml"

            export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            if command -v docker-compose >/dev/null 2>&1; then
              sudo -E docker-compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d --remove-orphans
            else
              sudo -E docker compose   -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d --remove-orphans
            fi

            sleep 3
            sudo docker ps -a

      - name: Health check new target (run on EC2; public IP first)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 3m
          script: |
            set -e
            HC_OK=false
            for i in $(seq 1 20); do
              for u in "http://${{ secrets.WORKRUN_SERVER_IP }}:${{ env.STOPPED_PORT }}/actuator/health" "http://${{ secrets.WORKRUN_SERVER_IP }}:${{ env.STOPPED_PORT }}/hc" "http://127.0.0.1:${{ env.STOPPED_PORT }}/actuator/health" "http://127.0.0.1:${{ env.STOPPED_PORT }}/hc"; do
                echo "[$i] Trying $u ..."
                if curl -fsS --max-time 3 "$u" >/dev/null; then echo "OK: $u"; HC_OK=true; break; fi
              done
              [ "$HC_OK" = true ] && break
              sleep 3
            done
            if [ "$HC_OK" != true ]; then
              echo "healthcheck failed on ${{ env.STOPPED_PORT }}"
              sudo docker ps -a
              sudo docker logs --tail=200 ${{ env.TARGET_UPSTREAM }} || true
              exit 1
            fi

      - name: Switch nginx upstream (if running)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            if [ -n "$(sudo docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
              sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -t && nginx -s reload'
            else
              echo "nginxserver not running. skip reload."
            fi

      - name: Stop old upstream (ignore if first deploy)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker rm -f ${{ env.CURRENT_UPSTREAM }} || true
