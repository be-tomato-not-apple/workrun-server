name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build with Gradle (skip tests)
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar -x test

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg JAR_FILE=build/libs/*.jar \
            --platform linux/amd64 \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 1) 원격에서 현재 업스트림 감지(nginxserver 없거나 파일 없으면 green 출력)
      - name: Detect upstream via SSH (print only)
        id: detect
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
      
            # 컨테이너 실행 상태를 문자열로 확인 (true/false)
            RUNNING=$(sudo docker inspect -f '{{.State.Running}}' nginxserver 2>/dev/null || echo "false")
            if [ "$RUNNING" != "true" ]; then
              echo green
              exit 0
            fi
      
            # 파일에서 blue|green 추출 (없으면 green)
            UP=$(sudo docker exec -i nginxserver bash -lc "grep -oE '(blue|green)' /etc/nginx/conf.d/service-env.inc 2>/dev/null | head -n1 || true")
            if [ -z "$UP" ]; then UP=green; fi
            echo "$UP"

      # 2) 러너(로컬)에서 env 세팅
      - name: Set env from detected upstream
        run: |
          DETECTED="${{ steps.detect.outputs.stdout }}"
          DETECTED=$(echo "$DETECTED" | tr -d '\r\n' | xargs)
      
          if [ "$DETECTED" != "blue" ] && [ "$DETECTED" != "green" ]; then
            DETECTED=green
          fi
      
          echo "CURRENT_UPSTREAM=$DETECTED" >> $GITHUB_ENV
          if [ "$DETECTED" = "blue" ]; then
            echo "CURRENT_PORT=8080"   >> $GITHUB_ENV
            echo "STOPPED_PORT=8081"  >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          else
            echo "CURRENT_PORT=8081"  >> $GITHUB_ENV
            echo "STOPPED_PORT=8080"  >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue"  >> $GITHUB_ENV
          fi

      # 3) 대상 업스트림(blue/green) 기동: 이미지 풀 + 시크릿 파일 생성 + compose up
      - name: Deploy target upstream over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 20m
          script: |
            set -euo pipefail
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

            # application-secret.yml 주입
            sudo mkdir -p /home/ubuntu/secrets
            echo '${{ secrets.APPLICATION_SECRET }}' | base64 -d | sudo tee /home/ubuntu/secrets/application-secret.yml >/dev/null
            sudo chmod 600 /home/ubuntu/secrets/application-secret.yml

            # compose v1/v2 호환 실행
            if command -v docker-compose >/dev/null 2>&1; then
              sudo docker-compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d --remove-orphans
            else
              sudo docker compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d --remove-orphans
            fi

      # 4) 새 타겟 헬스체크 (STOPPED_PORT = 새 타겟 포트)
      - name: Health check new target
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.WORKRUN_SERVER_IP }}:${{ env.STOPPED_PORT }}/env
          max-attempts: 6
          retry-delay: 10s

      # 5) Nginx 업스트림 전환
      - name: Switch nginx upstream
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker exec -i nginxserver bash -lc 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'

      # 6) 기존 업스트림 종료(첫 배포면 없어도 무시)
      - name: Stop old upstream (ignore if first deploy)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker rm -f ${{ env.CURRENT_UPSTREAM }} || true
