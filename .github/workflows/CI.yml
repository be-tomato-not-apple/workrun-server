name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build with Gradle (skip tests)
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar -x test

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg JAR_FILE=build/libs/*.jar \
            --platform linux/amd64 \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Nginx의 service-env.inc에서 현재 upstream 조회 (nginx 컨테이너가 아직 없으면 green으로 가정)
      - name: Detect current upstream on EC2
        id: detect
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            if ! sudo docker inspect -f '{{.State.Running}}' nginxserver >/dev/null 2>&1; then
              echo "green" > upstream.txt
            else
              UP=$(sudo docker exec -i nginxserver bash -lc "grep -oE '(blue|green)' /etc/nginx/conf.d/service-env.inc 2>/dev/null || true")
              [ -z "$UP" ] && UP=green
              echo "$UP" > upstream.txt
            fi
            cat upstream.txt

      - name: Set matrix env vars
        run: |
          CURRENT_UPSTREAM=$(echo "${{ steps.detect.outputs.stdout }}" | tr -d '\r\n')
          if [ -z "$CURRENT_UPSTREAM" ]; then CURRENT_UPSTREAM=green; fi
          echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM" >> $GITHUB_ENV
          if [ "$CURRENT_UPSTREAM" = "blue" ]; then
            echo "CURRENT_PORT=8080"   >> $GITHUB_ENV
            echo "STOPPED_PORT=8081"  >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          else
            echo "CURRENT_PORT=8081"  >> $GITHUB_ENV
            echo "STOPPED_PORT=8080"  >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue"  >> $GITHUB_ENV
          fi
        shell: bash

      - name: Deploy target upstream (pull, secret write, compose up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 20m
          script: |
            set -euo pipefail
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

            # application-secret.yml 주입
            sudo mkdir -p /home/ubuntu/secrets
            echo '${{ secrets.APPLICATION_SECRET }}' | base64 -d | sudo tee /home/ubuntu/secrets/application-secret.yml >/dev/null
            sudo chmod 600 /home/ubuntu/secrets/application-secret.yml

            # compose up (v1/v2 호환)
            if command -v docker-compose >/dev/null 2>&1; then
              sudo docker-compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d --remove-orphans
            else
              sudo docker compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d --remove-orphans
            fi

      # 헬스체크는 외부가 아닌 EC2 내부에서 수행 (보안그룹/공인IP 영향 제거)
      - name: Health check new target (run on EC2)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            for i in {1..24}; do
              if curl -sf "http://127.0.0.1:${{ env.STOPPED_PORT }}/env" >/dev/null; then
                echo "new app is UP on ${{ env.STOPPED_PORT }}"
                exit 0
              fi
              echo "waiting app on ${{ env.STOPPED_PORT }} ... ($i)"
              sleep 5
            done
            echo "healthcheck failed on ${{ env.STOPPED_PORT }}"
            sudo docker ps -a
            sudo docker logs --tail=200 ${{ env.TARGET_UPSTREAM }} || true
            exit 1

      - name: Switch nginx upstream
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'

      - name: Stop old upstream (ignore if first deploy)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker rm -f ${{ env.CURRENT_UPSTREAM }} || true
