name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # Gradle 전용 액션: 캐시/데몬/설정 캐시 자동 처리
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build jar (skip tests, no clean, use caches)
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar -x test --build-cache

      # ---------- Docker: PR에서는 스킵, main push에서만 빌드/푸시 ----------
      - name: Set up Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image (cached)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          # platform은 기본(x86_64) 사용. 불필요한 --platform 제거
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest
          build-args: |
            JAR_FILE=build/libs/*.jar
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false  # 로그/메타 축소(선택)

  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy/Health/Switch via single SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 20m
          script: |
            set -euo pipefail

            # 0) 현재 업스트림 감지 (ssh 옵션으로 타임아웃/keepalive)
            detect_upstream() {
              if [ -z "$(sudo docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
                echo green
              else
                sudo docker exec -i nginxserver bash -lc 'grep -oE "(blue|green)" /etc/nginx/conf.d/service-env.inc 2>/dev/null || echo green'
              fi
            }
            UP=$(detect_upstream)
            echo "Detected upstream: $UP"
            if [ "$UP" = "blue" ]; then
              CURRENT_UPSTREAM=blue; CURRENT_PORT=8080; STOPPED_PORT=8081; TARGET_UPSTREAM=green
            else
              CURRENT_UPSTREAM=green; CURRENT_PORT=8081; STOPPED_PORT=8080; TARGET_UPSTREAM=blue
            fi

            # 1) 이미지 pull + 시크릿 주입 + compose up
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

            sudo mkdir -p /home/ubuntu/secrets
            echo '${{ secrets.APPLICATION_SECRET }}' | base64 -d | sudo tee /home/ubuntu/secrets/application-secret.yml >/dev/null
            sudo chmod 600 /home/ubuntu/secrets/application-secret.yml

            cd /home/ubuntu
            export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            COMPOSE_FILE="docker-compose-${TARGET_UPSTREAM}.yml"
            echo "Compose: $COMPOSE_FILE"
            ls -l "$COMPOSE_FILE"

            if command -v docker-compose >/dev/null 2>&1; then
              sudo -E docker-compose -f "$COMPOSE_FILE" up -d --remove-orphans
            else
              sudo -E docker compose -f "$COMPOSE_FILE" up -d --remove-orphans
            fi

            # 2) 헬스체크 (빠르게, 총 ~30s)
            for i in $(seq 1 10); do
              if curl -sf "http://127.0.0.1:${STOPPED_PORT}/hc" >/dev/null \
                 || curl -sf "http://${{ secrets.WORKRUN_SERVER_IP }}:${STOPPED_PORT}/hc" >/dev/null; then
                echo "NEW app is UP on ${STOPPED_PORT}"
                break
              fi
              echo "waiting app on ${STOPPED_PORT} ... ($i/10)"
              sleep 3
            done

            # 3) Nginx 업스트림 전환(있을 때만)
            if [ -n "$(sudo docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
              sudo docker exec -i nginxserver bash -lc "echo 'set \$service_url ${TARGET_UPSTREAM};' > /etc/nginx/conf.d/service-env.inc && nginx -s reload"
            else
              echo "nginxserver not running. skip reload."
            fi

            # 4) 이전 업스트림 종료(첫 배포면 skip)
            sudo docker rm -f "${CURRENT_UPSTREAM}" || true
