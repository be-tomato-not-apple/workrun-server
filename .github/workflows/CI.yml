name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: read

# 같은 브랜치에 연속 푸시되면 이전 작업 취소
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # ---- 타이밍 트레이스 시작 ----
      - name: __trace:start
        run: |
          echo "START_TS=$(date +%s)" >> "$GITHUB_ENV"
          echo "STEP_TS=$(date +%s)"  >> "$GITHUB_ENV"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: __trace:mark checkout
        run: |
          NOW=$(date +%s); echo "$NOW $STEP_TS checkout" >> timings.txt; echo "STEP_TS=$NOW" >> "$GITHUB_ENV"

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: __trace:mark java+gradle
        run: |
          NOW=$(date +%s); echo "$NOW $STEP_TS java+gradle" >> timings.txt; echo "STEP_TS=$NOW" >> "$GITHUB_ENV"

      - name: Build jar (skip tests, use caches)
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar -x test --build-cache
      - name: __trace:mark gradle-build
        run: |
          NOW=$(date +%s); echo "$NOW $STEP_TS gradle-build" >> timings.txt; echo "STEP_TS=$NOW" >> "$GITHUB_ENV"

      # ---- JAR 검증 & 아티팩트 업로드(디버그용) ----
      - name: Assert JAR exists
        run: |
          echo "Listing build/libs:"
          ls -l build/libs || true
          JAR=$(ls -1 build/libs/*.jar | head -n1)
          [ -f "$JAR" ] || (echo "❌ JAR not found in build/libs"; exit 1)
          echo "✅ Found JAR: $JAR"

      - name: Upload JAR artifact (debug)
        uses: actions/upload-artifact@v4
        with:
          name: built-jar
          path: build/libs/*.jar
          retention-days: 3

      # ---------- Docker: main push에서만 빌드/푸시 ----------
      - name: Set up Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image (cached, with SHA tag)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:${{ github.sha }}
          build-args: |
            JAR_FILE=build/libs/*.jar
            VCS_REF=${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
      - name: __trace:mark docker-build-push
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          NOW=$(date +%s); echo "$NOW $STEP_TS docker-build-push" >> timings.txt; echo "STEP_TS=$NOW" >> "$GITHUB_ENV"

      # ---- 타이밍 요약 (Job 끝) ----
      - name: __trace:summary
        if: always()
        run: |
          {
            echo "### Step Timings"
            echo ""
            echo "| 구간 | 소요(s) |"
            echo "|---|---:|"
            START=${START_TS:-$(date +%s)}
            PREV=$START
            while read -r NOW LAST DESC; do
              echo "| $DESC | $((NOW-PREV)) |"
              PREV=$NOW
            done < timings.txt
            echo ""
            echo "> 총합: $((PREV-START))s"
          } >> "$GITHUB_STEP_SUMMARY" || true

  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      # --- 1) Deploy target (login/pull/secret/compose up) ---
      - name: 1) Deploy target (login/pull/secret/compose up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30s
          command_timeout: 10m
          debug: true
          script: |
            set -Eeuo pipefail
            exec {BASH_XTRACEFD}>&2; set -x

            detect_upstream() {
              if [ -z "$(sudo docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
                echo green
              else
                sudo docker exec -i nginxserver bash -lc 'grep -oE "(blue|green)" /etc/nginx/conf.d/service-env.inc 2>/dev/null || echo green'
              fi
            }
            UP=$(detect_upstream)
            echo "Detected upstream: $UP"
            if [ "$UP" = "blue" ]; then
              CURRENT_UPSTREAM=blue; CURRENT_PORT=8080; STOPPED_PORT=8081; TARGET_UPSTREAM=green
            else
              CURRENT_UPSTREAM=green; CURRENT_PORT=8081; STOPPED_PORT=8080; TARGET_UPSTREAM=blue
            fi

            T=15
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo timeout $T docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            sudo timeout 120 docker pull ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

            sudo mkdir -p /home/ubuntu/secrets
            echo '${{ secrets.APPLICATION_SECRET }}' | base64 -d | sudo tee /home/ubuntu/secrets/application-secret.yml >/dev/null
            sudo chmod 600 /home/ubuntu/secrets/application-secret.yml

            cd /home/ubuntu
            export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            COMPOSE_FILE="docker-compose-${TARGET_UPSTREAM}.yml"
            ls -l "$COMPOSE_FILE"

            if command -v docker-compose >/dev/null 2>&1; then
              sudo -E timeout 120 docker-compose -f "$COMPOSE_FILE" up -d --remove-orphans
            else
              sudo -E timeout 120 docker compose -f "$COMPOSE_FILE" up -d --remove-orphans
            fi

      # --- 2) Healthcheck only (두 경로 시도) ---
      - name: 2) Healthcheck (retry + rich diagnostics)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30s
          command_timeout: 4m
          debug: true
          script: |
            set -Eeuo pipefail
            exec {BASH_XTRACEFD}>&2; set -x
      
            # 대상 업스트림/포트 결졍
            if [ -z "$(sudo docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
              UP=green
            else
              UP=$(sudo docker exec -i nginxserver bash -lc 'grep -oE "(blue|green)" /etc/nginx/conf.d/service-env.inc 2>/dev/null || echo green')
            fi
            if [ "$UP" = "blue" ]; then
              STOPPED_PORT=8081; TARGET=green
            else
              STOPPED_PORT=8080; TARGET=blue
            fi
            echo "Health target: $TARGET on $STOPPED_PORT"
      
            # 기동 직후 상태 확인
            sudo docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
      
            # 컨테이너 안에 JAR/리스너 존재 여부를 먼저 본다
            if sudo docker ps -q -f name=^$TARGET$ >/dev/null; then
              sudo docker exec -i "$TARGET" sh -lc 'ls -lh /app || true; ss -ltnp 2>/dev/null | grep ":8080" || netstat -ltnp 2>/dev/null | grep ":8080" || true'
            fi
      
            # 재시도 루프 (최대 40회, 약 2분)
            HC_OK=false
            for i in $(seq 1 40); do
              for u in "http://127.0.0.1:${STOPPED_PORT}/hc" "http://127.0.0.1:${STOPPED_PORT}/actuator/health"; do
                echo "[$i] Trying $u ..."
                if curl -fsS --max-time 3 "$u" >/dev/null; then echo "✅ $u OK"; HC_OK=true; break; fi
              done
              [ "$HC_OK" = true ] && break
              # 중간 중간 상태 덤프 (10회마다)
              if [ $((i % 10)) -eq 0 ]; then
                echo "[diag] docker ps snapshot:"
                sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
                echo "[diag] last 50 logs of $TARGET:"
                sudo docker logs --tail=50 "$TARGET" || true
              fi
              sleep 3
            done
      
            if [ "$HC_OK" != true ]; then
              echo "❌ healthcheck failed on ${STOPPED_PORT}. final diagnostics..."
              sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              sudo docker logs --tail=200 "$TARGET" || true
              exit 1
            fi

      # --- 3) Nginx switch only ---
      - name: 3) Nginx switch (if running)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30s
          command_timeout: 60s
          debug: true
          script: |
            set -Eeuo pipefail
            exec {BASH_XTRACEFD}>&2; set -x

            detect_upstream() {
              if [ -z "$(sudo docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
                echo green
              else
                sudo docker exec -i nginxserver bash -lc 'grep -oE "(blue|green)" /etc/nginx/conf.d/service-env.inc 2>/dev/null || echo green'
              fi
            }
            UP=$(detect_upstream)
            if [ "$UP" = "blue" ]; then TARGET_UPSTREAM=green; else TARGET_UPSTREAM=blue; fi

            if [ -n "$(sudo docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
              sudo docker exec -i nginxserver bash -lc "echo 'set \$service_url ${TARGET_UPSTREAM};' > /etc/nginx/conf.d/service-env.inc && nginx -t && nginx -s reload"
            else
              echo "nginxserver not running. skip reload."
            fi

      # --- 3.5) Nginx 설정/프록시 검증 ---
      - name: 3.5) Nginx check
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30s
          command_timeout: 60s
          debug: true
          script: |
            set -Eeuo pipefail
            exec {BASH_XTRACEFD}>&2; set -x
            if [ -n "$(sudo docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
              sudo docker exec -i nginxserver bash -lc 'nginx -t && echo "[service-env.inc]:" && cat /etc/nginx/conf.d/service-env.inc && echo "[conf.d list]:" && ls -l /etc/nginx/conf.d && echo "[try proxy /hc]:" && (curl -fsS --max-time 3 http://127.0.0.1/hc || true)'
            else
              echo "nginxserver not running."
            fi

      # --- 4) Cleanup old upstream (ignore errors) ---
      - name: 4) Stop old upstream
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 30s
          command_timeout: 60s
          debug: true
          script: |
            set -Eeuo pipefail
            exec {BASH_XTRACEFD}>&2; set -x

            detect_upstream() {
              if [ -z "$(sudo docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
                echo green
              else
                sudo docker exec -i nginxserver bash -lc 'grep -oE "(blue|green)" /etc/nginx/conf.d/service-env.inc 2>/dev/null || echo green'
              fi
            }
            NOW=$(detect_upstream)
            if [ "$NOW" = "blue" ]; then OLD=green; else OLD=blue; fi
            sudo docker rm -f "$OLD" || true
