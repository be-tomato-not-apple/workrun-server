name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build with Gradle (skip tests)
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar -x test

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --build-arg JAR_FILE=build/libs/*.jar \
            --platform linux/amd64 \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 0) (옵션) nginx 보장 - 없으면 만들고, 있으면 start
      - name: Ensure nginx is running (robust)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            if sudo docker ps -a --format '{{.Names}}' | grep -qx nginxserver; then
              if [ -z "$(sudo docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
                echo "[nginx] Found container but stopped -> starting"
                sudo docker start nginxserver
              else
                echo "[nginx] Already running"
              fi
            else
              echo "[nginx] Creating fresh container..."
              sudo mkdir -p /home/ubuntu/nginx/conf.d

              # app.conf (blue/green upstream + /env)
              cat <<'EOF' | sudo tee /home/ubuntu/nginx/conf.d/app.conf >/dev/null
upstream blue  { server 127.0.0.1:8080; }
upstream green { server 127.0.0.1:8081; }

server {
  listen 80;

  include /etc/nginx/conf.d/service-env.inc;

  location / {
    proxy_pass http://$service_url;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  location = /env {
    default_type text/plain;
    return 200 "$service_url\n";
  }
}
EOF

              # 기본 선택 값 (최초 deploy 가정)
              echo 'set $service_url green;' | sudo tee /home/ubuntu/nginx/conf.d/service-env.inc >/dev/null

              sudo docker run -d --name nginxserver -p 80:80 \
                -v /home/ubuntu/nginx/conf.d/app.conf:/etc/nginx/conf.d/app.conf:ro \
                -v /home/ubuntu/nginx/conf.d/service-env.inc:/etc/nginx/conf.d/service-env.inc \
                nginx:1.25
            fi
            sudo docker ps -a

      # 1) 현재 업스트림 감지(nginx 없거나 꺼져있으면 green 가정)
      - name: Detect current upstream (native ssh, hardened)
        shell: bash
        run: |
          set -euo pipefail
          printf '%s' "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > id_rsa
          chmod 600 id_rsa

          UP=$(
            ssh -o StrictHostKeyChecking=no \
                -o ConnectTimeout=10 \
                -o ServerAliveInterval=10 \
                -o ServerAliveCountMax=3 \
                -i id_rsa ubuntu@${{ secrets.WORKRUN_SERVER_IP }} \
                'if [ -z "$(sudo docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
                   echo green
                 else
                   sudo docker exec -i nginxserver bash -lc '\''grep -oE "(blue|green)" /etc/nginx/conf.d/service-env.inc 2>/dev/null || echo green'\''
                 fi' || echo "green"
          )
          [ -z "$UP" ] && UP=green
          echo "Detected upstream on EC2: $UP"

          {
            echo "CURRENT_UPSTREAM=$UP"
            if [ "$UP" = "blue" ]; then
              echo "CURRENT_PORT=8080"
              echo "STOPPED_PORT=8081"
              echo "TARGET_UPSTREAM=green"
            else
              echo "CURRENT_PORT=8081"
              echo "STOPPED_PORT=8080"
              echo "TARGET_UPSTREAM=blue"
            fi
          } >> "$GITHUB_ENV"

      # 2) 대상 업스트림 컨테이너 기동
      - name: Deploy target upstream (pull, secret write, compose up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 20m
          script: |
            set -euo pipefail
            sudo -n true

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo -n docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            timeout 180 sudo -n docker pull ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

            sudo -n mkdir -p /home/ubuntu/secrets
            echo '${{ secrets.APPLICATION_SECRET }}' | base64 -d | sudo -n tee /home/ubuntu/secrets/application-secret.yml >/dev/null
            sudo -n chmod 600 /home/ubuntu/secrets/application-secret.yml

            COMPOSE_FILE="/home/ubuntu/docker-compose-${{ env.TARGET_UPSTREAM }}.yml"
            sudo -n ls -l "$COMPOSE_FILE"

            if command -v docker-compose >/dev/null 2>&1; then
              timeout 180 sudo -nE docker-compose -f "$COMPOSE_FILE" up -d --remove-orphans
            else
              timeout 180 sudo -nE docker compose -f "$COMPOSE_FILE" up -d --remove-orphans
            fi

            sleep 2
            sudo -n docker ps -a

      # 3) 헬스체크 (퍼블릭 IP 우선, 실패 시 로컬)
      - name: Health check new target (run on EC2; public IP first)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            for i in {1..36}; do  # 최대 3분
              if curl -sf "http://${{ secrets.WORKRUN_SERVER_IP }}:${{ env.STOPPED_PORT }}/hc" >/dev/null \
                 || curl -sf "http://127.0.0.1:${{ env.STOPPED_PORT }}/hc" >/dev/null; then
                echo "new app is UP on ${{ env.STOPPED_PORT }}"
                exit 0
              fi
              echo "waiting app on ${{ env.STOPPED_PORT }} ... ($i/36)"
              sleep 5
            done
            echo "healthcheck failed on ${{ env.STOPPED_PORT }}"
            sudo docker ps -a
            sudo docker logs --tail=200 ${{ env.TARGET_UPSTREAM }} || true
            exit 1

      # 4) Nginx 업스트림 전환
      - name: Switch nginx upstream (if running)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            if [ -n "$(sudo docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
              sudo docker exec -i nginxserver bash -lc 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'
            else
              echo "nginxserver not running. skip reload."
            fi

      # 5) 이전 업스트림 종료(첫 배포면 없어도 통과)
      - name: Stop old upstream (ignore if first deploy)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker rm -f ${{ env.CURRENT_UPSTREAM }} || true
