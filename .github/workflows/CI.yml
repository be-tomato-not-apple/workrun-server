name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # Gradle wrapper가 캐시/데몬/설정 캐시 알아서 관리
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle (skip tests, no clean, use caches)
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar -x test --build-cache

      # JAR 존재 여부 검증
      - name: Assert JAR exists
        run: |
          echo "Listing build/libs:"
          ls -l build/libs || true
          JAR=$(ls -1 build/libs/*.jar | head -n1)
          [ -f "$JAR" ] || (echo "❌ JAR not found in build/libs"; exit 1)
          echo "✅ Found JAR: $JAR"

      # ⬇️ 아래 3개는 main 브랜치에 push일 때만 실행(PR에서는 빌드만)
      - name: Login to DockerHub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Build & Push image (cached, latest + sha tag)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:${{ github.sha }}
          build-args: |
            JAR_FILE=build/libs/*.jar
            VCS_REF=${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  deploy:
    needs: build
    # ⬇️ PR에서는 배포 전체를 스킵. main에 push일 때만 동작
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      # 1) 현재 업스트림 감지(원래 방식 유지: 러너에서 native ssh) + fail-fast 옵션
      - name: Detect current upstream (native ssh)
        shell: bash
        run: |
          set -euo pipefail
          echo "${{ secrets.EC2_SSH_KEY }}" > id_rsa
          chmod 600 id_rsa
          SSH_OPTS="-o StrictHostKeyChecking=no -o ConnectTimeout=8 -o ConnectionAttempts=1 -o ServerAliveInterval=10 -o ServerAliveCountMax=2 -o PreferredAuthentications=publickey -o PubkeyAuthentication=yes -o IPQoS=none"
          UP=$(ssh $SSH_OPTS -i id_rsa ubuntu@${{ secrets.WORKRUN_SERVER_IP }} \
            'if [ -z "$(docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
               echo green
             else
               docker exec -i nginxserver bash -lc '\''grep -oE "(blue|green)" /etc/nginx/conf.d/service-env.inc 2>/dev/null || echo green'\''
             fi')
          echo "Detected upstream on EC2: $UP"
          echo "CURRENT_UPSTREAM=$UP" >> "$GITHUB_ENV"
          if [ "$UP" = "blue" ]; then
            echo "CURRENT_PORT=8080"   >> "$GITHUB_ENV"
            echo "STOPPED_PORT=8081"  >> "$GITHUB_ENV"
            echo "TARGET_UPSTREAM=green" >> "$GITHUB_ENV"
          else
            echo "CURRENT_PORT=8081"  >> "$GITHUB_ENV"
            echo "STOPPED_PORT=8080"  >> "$GITHUB_ENV"
            echo "TARGET_UPSTREAM=blue"  >> "$GITHUB_ENV"
          fi

      # 2) 대상 업스트림 컨테이너 기동 (이미지 pull, secret 파일 주입, compose up)
      - name: Deploy target upstream (pull, secret write, compose up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 20m
        env:
          TARGET_UPSTREAM: ${{ env.TARGET_UPSTREAM }}
        script: |
          set -Eeuo pipefail
          trap 'echo "[ERR] line:$LINENO code:$?"' ERR
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

          # secret 주입 (base64 → 파일)
          sudo mkdir -p /home/ubuntu/secrets
          echo '${{ secrets.APPLICATION_SECRET }}' | base64 -d | sudo tee /home/ubuntu/secrets/application-secret.yml >/dev/null
          sudo chmod 600 /home/ubuntu/secrets/application-secret.yml
          sudo ls -l /home/ubuntu/secrets || true

          cd /home/ubuntu
          echo "Compose: docker-compose-${TARGET_UPSTREAM}.yml"
          ls -l "docker-compose-${TARGET_UPSTREAM}.yml"

          # compose 실행 시 DOCKERHUB_USERNAME 환경변수 보존
          export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
          if command -v docker-compose >/dev/null 2>&1; then
            sudo -E docker-compose -f docker-compose-${TARGET_UPSTREAM}.yml up -d --remove-orphans
          else
            sudo -E docker compose -f docker-compose-${TARGET_UPSTREAM}.yml up -d --remove-orphans
          fi

          sleep 2
          sudo docker ps -a --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'

      # 3) 헬스체크(재시도/타임아웃 강화 + /hc & /actuator/health 동시 지원)
      - name: Health check new target (retry & rich diagnostics)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 5m
        env:
          STOPPED_PORT: ${{ env.STOPPED_PORT }}
          TARGET_UPSTREAM: ${{ env.TARGET_UPSTREAM }}
        script: |
          set -Eeuo pipefail
          trap 'echo "[ERR] line:$LINENO code:$?"' ERR

          PORT="${STOPPED_PORT}"
          TARGET="${TARGET_UPSTREAM}"
          echo "Health target: $TARGET on $PORT"

          HC_OK=false
          for i in $(seq 1 40); do
            for u in "http://127.0.0.1:${PORT}/hc" "http://127.0.0.1:${PORT}/actuator/health"; do
              echo "[$i] Trying $u ..."
              if curl -fsS --max-time 3 "$u" >/dev/null; then
                echo "✅ $u OK"
                HC_OK=true
                break
              fi
            done
            [ "$HC_OK" = true ] && break
            if [ $((i % 10)) -eq 0 ]; then
              echo "[diag] docker ps snapshot:"
              sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              echo "[diag] last 50 logs of $TARGET:"
              sudo docker logs --tail=50 "$TARGET" || true
            fi
            sleep 3
          done

          if [ "$HC_OK" != true ]; then
            echo "❌ healthcheck failed on ${PORT}. final diagnostics..."
            sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            sudo docker logs --tail=200 "${TARGET}" || true
            exit 1
          fi

      # 4) Nginx 업스트림 전환(nginxserver 실행 중일 때만)
      - name: Switch nginx upstream (if running)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
        env:
          TARGET_UPSTREAM: ${{ env.TARGET_UPSTREAM }}
        script: |
          set -Eeuo pipefail
          if [ -n "$(sudo docker ps -q -f name=^nginxserver$ -f status=running)" ]; then
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${TARGET_UPSTREAM};" > /etc/nginx/conf.d/service-env.inc && nginx -t && nginx -s reload'
            # Nginx 경유 헬스도 확인(있으면)
            sudo docker exec -i nginxserver bash -lc '(curl -fsS --max-time 3 http://127.0.0.1/actuator/health || curl -fsS --max-time 3 http://127.0.0.1/hc || true)'
          else
            echo "nginxserver not running. skip reload."
          fi

      # 5) 이전 업스트림 종료(첫 배포면 없어도 통과)
      - name: Stop old upstream (ignore if first deploy)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
        env:
          CURRENT_UPSTREAM: ${{ env.CURRENT_UPSTREAM }}
        script: |
          sudo docker rm -f "${CURRENT_UPSTREAM}" || true
