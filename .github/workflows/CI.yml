name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Build with Gradle (skip tests)
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar -x test

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        # Dockerfile이 ARG JAR_FILE을 받는 경우를 대비 (Gradle 산출물 경로)
        run: |
          docker build \
            --build-arg JAR_FILE=build/libs/*.jar \
            --platform linux/amd64 \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Detect current upstream on server
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "http://${{ secrets.WORKRUN_SERVER_IP }}/env")
          if [ "$STATUS" = "200" ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.WORKRUN_SERVER_IP }}/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo "CURRENT_UPSTREAM=$CURRENT_UPSTREAM" >> $GITHUB_ENV

          if [ "$CURRENT_UPSTREAM" = "blue" ]; then
            echo "CURRENT_PORT=8080"   >> $GITHUB_ENV
            echo "STOPPED_PORT=8081"  >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          elif [ "$CURRENT_UPSTREAM" = "green" ]; then
            echo "CURRENT_PORT=8081"  >> $GITHUB_ENV
            echo "STOPPED_PORT=8080"  >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue"  >> $GITHUB_ENV
          else
            echo "error"; exit 1
          fi

      - name: Deploy target upstream over SSH (pull image, write secret file, up)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 20m
          script: |
            set -euo pipefail

            # 1) DockerHub 로그인 & 최신 이미지 pull
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/workrun_server:latest

            # 2) base64 로 전달된 application-secret.yml 파일 생성
            sudo mkdir -p /home/ubuntu/secrets
            echo '${{ secrets.APPLICATION_SECRET }}' | base64 -d | sudo tee /home/ubuntu/secrets/application-secret.yml >/dev/null
            sudo chmod 600 /home/ubuntu/secrets/application-secret.yml

            # 3) docker compose up (v1/v2 호환), 불필요 컨테이너 제거
            if command -v docker-compose >/dev/null 2>&1; then
              sudo docker-compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d --remove-orphans
            else
              sudo docker compose -f docker-compose-${{ env.TARGET_UPSTREAM }}.yml up -d --remove-orphans
            fi

      - name: Health check new target
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ secrets.WORKRUN_SERVER_IP }}:${{ env.STOPPED_PORT }}/env
          max-attempts: 6
          retry-delay: 10s

      - name: Switch nginx upstream
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'

      - name: Stop old upstream (ignore if first deploy)
        uses: appleboy/ssh-action@v1.0.3
        with:
          username: ubuntu
          host: ${{ secrets.WORKRUN_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker rm -f ${{ env.CURRENT_UPSTREAM }} || true
